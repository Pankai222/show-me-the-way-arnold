@page "/Workout"
@using Show_Me_The_Way_Arnold.Models
@using Show_Me_The_Way_Arnold.Services

<h3>Add Workout</h3>
@if (_isLoaded)
{
    <p>
        <MatTextField @bind-Value="@_workoutName" Label="Workout name"></MatTextField>
    </p>
    <p>
        <MatTextField @bind-Value="@_workoutDuration" Label="Workout Duration"></MatTextField>
    </p>
    <p>
        <MatTextField @bind-Value="@_workoutDifficulty" Label="Workout Difficulty"></MatTextField>
    </p>
    <p>
        <!-- TODO: should be an exercise object instead of just a string? -->
        <MatSelect Label="Pick an exercise" @bind-Value="@_exercise">
            <MatOptionString></MatOptionString>
            @foreach (var exercise in _exercises)
            {
                <MatOption Value="@exercise">@exercise.Name</MatOption>
            }
        </MatSelect>
    </p>
    <MatButton Type="submit" Raised="true" @onclick="@SubmitWorkout">Add Workout</MatButton>
}

@* ReSharper disable once CSharpWarnings::CS8669 *@
@code {
    private bool _isLoaded;
    private List<Exercise> _exercises;
    private List<Exercise> _selectedExercises;
    private Exercise? _exercise;
    private string _workoutName;
    private string _workoutDuration;
    private int? _workoutDifficulty;
    
    [Inject]
    public ExerciseService ExerciseService { get; set; }
    [Inject]
    public WorkoutService WorkoutService { get; set; }

    private async void SubmitWorkout()
    {
        var workoutRoutineHasExercises = new List<WorkoutRoutineHasExercises>();
        workoutRoutineHasExercises.Add(new WorkoutRoutineHasExercises
        {
            Sets = 10,
            Repetitions = 10,
            Exercise = _exercise,
        });
        var payload = new WorkoutRoutine
        {
            Name = _workoutName,
            Duration = _workoutDuration,
            Difficulty = _workoutDifficulty,
            WorkoutRoutineHasExercises = workoutRoutineHasExercises,
        };
            
        await WorkoutService.AddWorkoutRoutine(payload);
    }

    protected override async Task OnInitializedAsync()
    {
        _exercises = await ExerciseService.GetExercises();
        if (_exercises is not null)
        {
            if (_exercises.Any())
            {
                _isLoaded = true;
            }
        }
    }
}