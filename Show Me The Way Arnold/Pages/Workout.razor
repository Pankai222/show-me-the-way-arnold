@page "/Workout"
@using Show_Me_The_Way_Arnold.Models
@using Show_Me_The_Way_Arnold.Services
@inject IJSRuntime JsRuntime

<div>
    <h3>Create A Workout Routine</h3>
    @if (_isLoaded)
    {
        <MatTextField @bind-Value="@_workoutName" Label="Workout name"></MatTextField>
        <MatTextField @bind-Value="@_workoutDuration" Label="Workout Duration"></MatTextField>
        <MatTextField @bind-Value="@_workoutDifficulty" Label="Workout Difficulty"></MatTextField>
        <div>
            <h5>Add An Exercise</h5>
            <MatTextField @bind-Value="@_sets" Label="Sets"></MatTextField>
            <MatTextField @bind-Value="@_reps" Label="Repetitions"></MatTextField>
            <MatSelect Label="Pick an exercise" @bind-Value="@_exercise">
                @foreach (var exercise in _exercises)
                {
                    <MatOption Value="@exercise.Id.ToString()">@exercise.Name</MatOption>
                }
            </MatSelect>
            <MatButton @onclick="@AddRoutineExerciseToList">Add Exercise To Workout</MatButton>
        </div>
        <MatButton Type="submit" Raised="true" @onclick="@SubmitWorkout">Create Workout</MatButton>
    }
    <MatSnackbar @bind-IsOpen="@activateSnackbar">
        <MatSnackbarContent>Exercise has been added</MatSnackbarContent>
    </MatSnackbar>
    <MatSnackbar @bind-IsOpen="@activateWorkoutSnackbar">
        <MatSnackbarContent>Workout routine has been added</MatSnackbarContent>
    </MatSnackbar>
</div>


@code {
    private bool _isLoaded;
    private List<Exercise> _exercises;
    private List<WorkoutRoutineHasExercises> _workoutRoutineHasExercises = new();
    private string _exercise;
    private int? _sets;
    private int? _reps;
    private string _workoutName;
    private string _workoutDuration;
    private int? _workoutDifficulty;
    private bool activateSnackbar;
    private bool activateWorkoutSnackbar;

    [Inject]
    public ExerciseService ExerciseService { get; set; }

    [Inject]
    public WorkoutService WorkoutService { get; set; }

    private void AddRoutineExerciseToList() 
    {
        _workoutRoutineHasExercises.Add(new WorkoutRoutineHasExercises
        {
            Sets = _sets,
            Repetitions = _reps,
            ExerciseId = int.Parse(_exercise)
        });
        activateSnackbar = true;
    }
    
    private async void SubmitWorkout()
    {
        var payload = new WorkoutRoutine
        {
            Name = _workoutName,
            Duration = _workoutDuration,
            Difficulty = _workoutDifficulty,
            WorkoutRoutineHasExercises = _workoutRoutineHasExercises
        };

        activateWorkoutSnackbar = true;
        await WorkoutService.AddWorkoutRoutine(payload);
    }

    protected override async Task OnInitializedAsync()
    {
        _exercises = await ExerciseService.GetExercises();
        if (_exercises is not null)
        {
            if (_exercises.Any())
            {
                _isLoaded = true;
            }
        }
    }

}