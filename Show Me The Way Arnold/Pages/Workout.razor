@page "/Workout"
@using Show_Me_The_Way_Arnold.Models
@using Show_Me_The_Way_Arnold.Services

<div>
    <h3>Create A Workout Routine</h3>
    @if (_isLoaded)
    {
        <MatTextField @bind-Value="@_workoutRoutine.Name" Label="Workout name"></MatTextField>
        <MatTextField @bind-Value="@_workoutRoutine.Duration" Label="Workout Duration"></MatTextField>
        <MatTextField @bind-Value="@_workoutRoutine.Difficulty" Label="Workout Difficulty"></MatTextField>
        <div>
            <h5>Add An Exercise</h5>
            <MatSelect Label="Pick an exercise" @bind-Value="@_workoutRoutineHasExercise.ExerciseId">
                @foreach (var exercise in _exercises)
                {
                    <MatOption Value="@exercise.Id">@exercise.Name</MatOption>
                }
            </MatSelect>
            <MatTextField @bind-Value="@_workoutRoutineHasExercise.Sets" Label="Sets"></MatTextField>
            <MatTextField @bind-Value="@_workoutRoutineHasExercise.Repetitions" Label="Repetitions"></MatTextField>
            <MatButton @onclick="@AddRoutineExerciseToList">Add Exercise To Workout</MatButton>
        </div>
        <MatButton Type="submit" Raised="true" @onclick="@SubmitWorkout">Create Workout</MatButton>
    }
    <MatSnackbar @bind-IsOpen="@_activateSnackbar">
        <MatSnackbarContent>Exercise has been added</MatSnackbarContent>
    </MatSnackbar>
    <MatSnackbar @bind-IsOpen="@_activateWorkoutSnackbar">
        <MatSnackbarContent>Workout routine has been added</MatSnackbarContent>
    </MatSnackbar>
</div>


@code {
    private bool _isLoaded;
    private List<Exercise> _exercises;
    private List<WorkoutRoutineHasExercises> _workoutRoutineHasExercises = new();
    private WorkoutRoutineHasExercises _workoutRoutineHasExercise = new();
    private WorkoutRoutine _workoutRoutine = new();
    private bool _activateSnackbar;
    private bool _activateWorkoutSnackbar;

    [Inject]
    public ExerciseService ExerciseService { get; set; }

    [Inject]
    public WorkoutService WorkoutService { get; set; }

    private void AddRoutineExerciseToList()
    {
        var exercise = new WorkoutRoutineHasExercises
        {
            ExerciseId = _workoutRoutineHasExercise.ExerciseId,
            Sets = _workoutRoutineHasExercise.Sets,
            Repetitions = _workoutRoutineHasExercise.Repetitions
        };
        _workoutRoutineHasExercises.Add(exercise);
        _activateSnackbar = true;
    }

    private async void SubmitWorkout()
    {
        _workoutRoutine.WorkoutRoutineHasExercises = _workoutRoutineHasExercises;
        var payload = _workoutRoutine;
        
        await WorkoutService.AddWorkoutRoutine(payload);
        _activateWorkoutSnackbar = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _exercises = await ExerciseService.GetExercises();
        if (_exercises.Any())
        {
            _isLoaded = true;
        }
    }

}