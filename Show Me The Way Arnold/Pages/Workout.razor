@page "/Workout"
@using Show_Me_The_Way_Arnold.Models
@using Show_Me_The_Way_Arnold.Services
@using Show_Me_The_Way_Arnold.Components

<div>
    <h3>Create A Workout Routine</h3>
    @if (_isLoaded)
    {
        <MatTextField @bind-Value="@_workoutName" Label="Workout name"></MatTextField>
        <MatTextField @bind-Value="@_workoutDuration" Label="Workout Duration"></MatTextField>
        <MatTextField @bind-Value="@_workoutDifficulty" Label="Workout Difficulty"></MatTextField>
        <AddExerciseComponent Exercises="@_exercises"></AddExerciseComponent>
        <MatButton Type="submit" Raised="true" @onclick="@SubmitWorkout">Create Workout</MatButton>
    }
</div>


@code {
    private bool _isLoaded;
    private List<Exercise> _exercises;
    private List<WorkoutRoutineHasExercises> _exercisesForRoutine = new();
    private string _workoutName;
    private string _workoutDuration;
    private int? _workoutDifficulty;

    [Inject]
    public ExerciseService ExerciseService { get; set; }
    [Inject]
    public WorkoutService WorkoutService { get; set; }

    private async void SubmitWorkout()
    {
        var payload = new WorkoutRoutine
        {
            Name = _workoutName,
            Duration = _workoutDuration,
            Difficulty = _workoutDifficulty,
            WorkoutRoutineHasExercises = _exercisesForRoutine
        };

        await WorkoutService.AddWorkoutRoutine(payload);
    }

    protected override async Task OnInitializedAsync()
    {
        _exercises = await ExerciseService.GetExercises();
        if (_exercises is not null)
        {
            if (_exercises.Any())
            {
                _isLoaded = true;
            }
        }
    }

}